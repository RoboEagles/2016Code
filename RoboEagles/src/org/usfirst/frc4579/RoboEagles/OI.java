// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.RoboEagles;

import org.usfirst.frc4579.RoboEagles.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc4579.RoboEagles.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton load;
    public JoystickButton fire;
    public JoystickButton eject;
    public JoystickButton extendLiftArm_DriveStick;
    public JoystickButton retractLiftArm_DriveStick;
    public JoystickButton liftArmSafety_DriveStick;
    public Joystick driveStick;
    public JoystickButton liftArmSafety;
    public JoystickButton extendLiftArm;
    public JoystickButton retractLiftArm;
    public Joystick customController;
    public JoystickButton fire_Backup;
    public JoystickButton retractLiftArm_Backup;
    public JoystickButton extendLiftArm_Backup;
    public JoystickButton load_Backup;
    public JoystickButton eject_Backup;
    public JoystickButton liftArmSafety_Backup;
    public Joystick backupJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

       // backupJoystick = new Joystick(2);
        
//        liftArmSafety_Backup = new JoystickButton(backupJoystick, 10);
//        liftArmSafety_Backup.whenPressed(new Cmd_LiftArmSafety());
//        eject_Backup = new JoystickButton(backupJoystick, 3);
//        eject_Backup.whileHeld(new Cmd_Eject());
//        load_Backup = new JoystickButton(backupJoystick, 2);
//        load_Backup.whileHeld(new Cmd_Load());
//        extendLiftArm_Backup = new JoystickButton(backupJoystick, 7);
//        extendLiftArm_Backup.whenPressed(new Cmd_ExtendLiftArm());
//        retractLiftArm_Backup = new JoystickButton(backupJoystick, 1);
//        retractLiftArm_Backup.whenPressed(new Cmd_RetractLiftArm());
//        fire_Backup = new JoystickButton(backupJoystick, 1);
//        fire_Backup.whenPressed(new CmdGrp_Shoot());
        customController = new Joystick(1);
        
        retractLiftArm = new JoystickButton(customController, 1);
        retractLiftArm.whenPressed(new Cmd_RetractLiftArm());
        extendLiftArm = new JoystickButton(customController, 1);
        extendLiftArm.whenPressed(new Cmd_ExtendLiftArm());
        liftArmSafety = new JoystickButton(customController, 1);
        liftArmSafety.whileHeld(new Cmd_LiftArmSafety());
        driveStick = new Joystick(0);
        
        liftArmSafety_DriveStick = new JoystickButton(driveStick, 1);
        liftArmSafety_DriveStick.whenPressed(new Cmd_LiftArmSafety());
        retractLiftArm_DriveStick = new JoystickButton(driveStick, 11);
        retractLiftArm_DriveStick.whenPressed(new Cmd_RetractLiftArm());
        extendLiftArm_DriveStick = new JoystickButton(driveStick, 9);
        extendLiftArm_DriveStick.whenPressed(new Cmd_ExtendLiftArm());
        eject = new JoystickButton(driveStick, 1);
        eject.whileHeld(new Cmd_Eject());
        fire = new JoystickButton(driveStick, 1);
        fire.whenPressed(new Cmd_Shoot());
        load = new JoystickButton(driveStick, 2);
        load.whileHeld(new Cmd_Load());


        // SmartDashboard Buttons
        SmartDashboard.putData("Cmd_Load", new Cmd_Load());
        SmartDashboard.putData("Cmd_Default_Drive", new Cmd_Default_Drive());
        SmartDashboard.putData("Cmd_Default_Measure", new Cmd_Default_Measure());
        SmartDashboard.putData("Cmd_Default_Lift", new Cmd_Default_Lift());
        SmartDashboard.putData("Cmd_Spool", new Cmd_Spool());
        SmartDashboard.putData("Cmd_Feed", new Cmd_Feed());
        SmartDashboard.putData("Cmd_LiftArmSafety", new Cmd_LiftArmSafety());
        SmartDashboard.putData("Cmd_ExtendLiftArm", new Cmd_ExtendLiftArm());
        SmartDashboard.putData("Cmd_RetractLiftArm", new Cmd_RetractLiftArm());
        SmartDashboard.putData("Cmd_PrepareLift", new Cmd_PrepareLift());
        SmartDashboard.putData("CmdGrp_Shoot", new CmdGrp_Shoot());
        SmartDashboard.putData("AutoGrp_MoveToDefense", new AutoGrp_MoveToDefense());
        SmartDashboard.putData("Cmd_Eject", new Cmd_Eject());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        
        
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriveStick() {
        return driveStick;
    }

    public Joystick getCustomController() {
        return customController;
    }

    public Joystick getBackupJoystick() {
        return backupJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    
    public void periodic() {
    	
    	SmartDashboard.putNumber("Lifter Potentiometer Angle", Robot.lifter.getPot().get());
    	SmartDashboard.putBoolean("Loader Limit", Robot.loader.isLoaded());
    	
    	SmartDashboard.putNumber("Distance Sensor (in)", Robot.measurement.getUltrasonicDistance());
    	
    	SmartDashboard.putNumber("Relative Field Position (X)", Robot.measurement.getDistances().X);
    	SmartDashboard.putNumber("Relative Field Position (Y)", Robot.measurement.getDistances().Y);

    	SmartDashboard.putNumber("Velocity (X)", Robot.measurement.getVelocity().X);
    	SmartDashboard.putNumber("Velocity (Y)", Robot.measurement.getVelocity().Y);
    	
    	SmartDashboard.putNumber("Acceleration (X)", Robot.measurement.getAcceleration().X);
    	SmartDashboard.putNumber("Acceleration (Y)", Robot.measurement.getAcceleration().Y);
    	
    	SmartDashboard.putNumber("Shooter Motor RPM", Robot.measurement.getShooterSpeed());
    	
    	SmartDashboard.putNumber("Robot Angle", Robot.measurement.getGyroAngle());
    	
    	
    }
    
}

