// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4579.RoboEagles.subsystems;

import org.usfirst.frc4579.RoboEagles.RobotMap;
import org.usfirst.frc4579.RoboEagles.commands.*;

import com.RoboEagles4579.filters.AverageFilter;
import com.RoboEagles4579.math.Vector3d;
import com.RoboEagles4579.motors.MotorMonitor;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.BuiltInAccelerometer;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.Ultrasonic;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.interfaces.Accelerometer;


/**
 *
 */
public class Measurement extends Subsystem {

	private static final double calibrationTime = 4.0;
	private static final double GsToAccel = 32 * 12; //Gs to m/s/s
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AnalogGyro robotGyro = RobotMap.measurementrobotGyro;
    private final PowerDistributionPanel robotPDB = RobotMap.measurementrobotPDB;
    private final Ultrasonic robotUltrasonic = RobotMap.measurementrobotUltrasonic;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final MotorMonitor shooterMotorMonitor = new MotorMonitor(0, RobotMap.miniCIM);
    private double shooterMotorSpeed;
    
    private final Accelerometer robotAccelerometer = new BuiltInAccelerometer(Accelerometer.Range.k2G);
        
    private double accelOffsetX, accelOffsetY;
    private double accelDriftX, accelDriftY;
    
    private double accelX, accelY;
    
    private double distanceX = 0, distanceY = 0;
    
    
    private double gyroDrift; //degrees per second
    private double robotAngle;
    
    
    private AverageFilter ultrasonicAverage = new AverageFilter(10);
    
    private double startTime,
    				lastTime;
    
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new Cmd_Default_Measure());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    
    public void initialize() {
    	
    	startTime = getTime();
    	robotGyro.initGyro();
    	
    	lastTime = getTime();
    	
    	findDrifts();
    	
    	
    	System.out.println("Measurement Initialized");
    	System.out.println("Gyro Drift Deg/s: " + gyroDrift);
    	
    }
    
    public void measure() {
    	
    	double timestamp = getTime(),
    			deltaT = timestamp - lastTime,
    			time = timestamp - startTime;
    	
    	lastTime = timestamp;
    	
    	shooterMotorSpeed = shooterMotorMonitor.getSpeed();
    	ultrasonicAverage.filter(robotUltrasonic.getRangeInches());
    	
    	accelX = (robotAccelerometer.getX() - accelOffsetX) * GsToAccel;
    	accelY = (robotAccelerometer.getY() - accelOffsetY) * GsToAccel;
    	
    	
    	
    	distanceX += (0.5) * accelX * (deltaT * deltaT);
    	distanceY += (0.5) * accelY * (deltaT * deltaT);
    	
    	//System.out.println("Accel X: " + accelX);
    	//System.out.println("Accel Y: " + accelY + "\n");

    	System.err.println("Distance X: " + distanceX);
    	System.err.println("Distance Y: " + distanceY + "\n");
    	
    	
    	
    }
    
    public void findDrifts() {
    	
       	// Calculate Gyro Drift
    	double startAngle = robotGyro.getAngle();
    	
    	double accelX_start = robotAccelerometer.getX(),
    			accelY_start = robotAccelerometer.getY();
    	    	
    	Timer.delay(calibrationTime);
    	
    	double accelX_end = robotAccelerometer.getX(),
    			accelY_end = robotAccelerometer.getY();
    	
    	accelDriftX = (accelX_end - accelX_start) / calibrationTime;
    	accelDriftY = (accelY_end - accelY_start) / calibrationTime;
    	
    	
    	double lastAngle = robotGyro.getAngle();
    	    	
    	gyroDrift = (lastAngle - startAngle) / calibrationTime;
    	
    	int iterations = 1000;
    	
    	for(int i = 0; i <= iterations; i++) {
    		
    		
    		
    		accelOffsetX = robotAccelerometer.getX();
    		accelOffsetY = robotAccelerometer.getY();
    		
    	}
    	
    	
    	accelOffsetX /= iterations;
    	accelOffsetY /= iterations;
    }
    
    public double getCurrent(int port) {
    	return robotPDB.getCurrent(port);
    }
    
    
    public double getShooterSpeed() { //Returns RPM of Motor
    	return shooterMotorSpeed;
    }

	public double getUltrasonicDistance() {
		return ultrasonicAverage.getAverage();
	}
	
	public double getGyroAngle() {
		return robotAngle;
	}
	
	private double getTime() {
		return Timer.getFPGATimestamp() - startTime;
	}
    
}

